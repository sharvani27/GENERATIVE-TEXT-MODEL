# -*- coding: utf-8 -*-
"""GenerativeTextModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G_B_OydVGUuIV_QdmJMj4boldRu-CF-Z
"""

!pip install torch transformers tkinter

import torch
import gradio as gr
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Load pre-trained GPT-2 model and tokenizer
model_name = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Function to generate text
def generate_text(prompt, max_length=100):
    inputs = tokenizer(prompt, return_tensors="pt")
    outputs = model.generate(inputs.input_ids, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Create a Gradio UI
interface = gr.Interface(
    fn=generate_text,
    inputs=["text", gr.Slider(50, 300, step=10, label="Max Length")],
    outputs="text",
    title="AI Text Generator",
    description="Enter a prompt, and the model will generate text based on it.",
    theme="soft",
    live=True
)

# Launch the UI
interface.launch(share=True)

!pip install gradio

import torch
import gradio as gr
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Load pre-trained GPT-2 model and tokenizer
model_name = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Function to generate text
def generate_text(prompt, max_length=100):
    inputs = tokenizer(prompt, return_tensors="pt")
    outputs = model.generate(inputs.input_ids, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Create a Gradio UI
interface = gr.Interface(
    fn=generate_text,
    inputs=["text", gr.Slider(50, 300, step=10, label="Max Length")],
    outputs="text",
    title="AI Text Generator",
    description="Enter a prompt, and the model will generate text based on it.",
    theme="soft",
    live=True
)

# Launch the UI
interface.launch(share=True)
import torch
import gradio as gr
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Load pre-trained GPT-2 model and tokenizer
model_name = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Function to generate text
def generate_text(prompt, max_length=100):
    inputs = tokenizer(prompt, return_tensors="pt")
    outputs = model.generate(inputs.input_ids, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Create a Gradio UI
interface = gr.Interface(
    fn=generate_text,
    inputs=["text", gr.Slider(50, 300, step=10, label="Max Length")],
    outputs="text",
    title="AI Text Generator",
    description="Enter a prompt, and the model will generate text based on it.",
    theme="soft",
    live=True
)

# Launch the UI
interface.launch(share=True)



!pip install transformers torch

!pip install transformers torch ipywidgets

import ipywidgets as widgets
from transformers import pipeline
from IPython.display import display

# Load the pre-trained GPT-2 model
generator = pipeline("text-generation", model="gpt2")  # You can switch to "distilgpt2" for a smaller model

# Function to generate text based on the user prompt
def generate_text(prompt):
    result = generator(prompt, max_length=100, num_return_sequences=1)
    return result[0]['generated_text']

# GUI Elements
input_box = widgets.Textarea(
    value='',
    placeholder='Enter your prompt here...',
    description='Prompt:',
    disabled=False,
    layout=widgets.Layout(width='100%', height='150px')
)

output_area = widgets.Output()

# Button to trigger text generation
generate_button = widgets.Button(description="Generate Text")

# Function that runs when the button is clicked
def on_button_click(b):
    prompt = input_box.value
    if prompt:
        with output_area:
            # Clear previous output
            output_area.clear_output()
            # Display the generated text
            generated_text = generate_text(prompt)
            print(f"Generated Text:\n{generated_text}")
    else:
        with output_area:
            output_area.clear_output()
            print("Please enter a prompt to generate text!")

# Attach the button click event
generate_button.on_click(on_button_click)

# Display GUI
display(widgets.HTML("<h2 style='color: #FFA07A;'>Text Generation with GPT-2</h2>"))  # Title with peach color
display(input_box)
display(generate_button)
display(output_area)

# -*- coding: utf-8 -*-
"""GenerativeTextModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xugVBiVjdbzgOEL9WA51Fk9eRxbJHyTV
"""

!pip install transformers

!pip install transformers gradio

import gradio as gr
from transformers import pipeline

generator = pipeline('text-generation', model='gpt2')

def generate_text(prompt):
    try:
        result = generator(prompt, max_length=150, num_return_sequences=1)
        return result[0]['generated_text']
    except Exception as e:
        return str(e)

def ui_function(prompt):
    return generate_text(prompt)

interface = gr.Interface(
    fn=ui_function,
    inputs=gr.Textbox(lines=2, placeholder="Enter your prompt here..."),
    outputs="text",
    title="Generative Text Model (Hugging Face)",
    description="Enter a prompt to generate human-like text.",
    examples=[
        ["Explain the impact of artificial intelligence on healthcare."],
        ["Write a paragraph about the benefits of learning a new language."]
    ]
)

interface.launch()

# -*- coding: utf-8 -*-
"""GenerativeTextModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xugVBiVjdbzgOEL9WA51Fk9eRxbJHyTV
"""

!pip install transformers

!pip install transformers gradio

import gradio as gr
from transformers import pipeline

generator = pipeline('text-generation', model='gpt2')

def generate_text(prompt):
    try:
        result = generator(prompt, max_length=150, num_return_sequences=1)
        return result[0]['generated_text']
    except Exception as e:
        return str(e)

def ui_function(prompt):
    return generate_text(prompt)

# Custom CSS styling
custom_css = """
    .gradio-container {
        background-color: #E6E6FA;  /* Lilac color */
    }
    .gradio-button {
        background-color: #8A2BE2;  /* Violet color */
        color: white;
    }
    .gradio-button:hover {
        background-color: #7A1FA1;  /* Darker violet on hover */
    }
"""

interface = gr.Interface(
    fn=ui_function,
    inputs=gr.Textbox(lines=2, placeholder="Enter your prompt here..."),
    outputs="text",
    title="Generative Text Model",
    description="Enter a prompt to generate human-like text.",
    examples=[
        ["Explain the impact of artificial intelligence on healthcare."],
        ["Write a paragraph about the benefits of learning a new language."]
    ],
    css=custom_css  # Apply the custom CSS for styling
)

interface.launch()

!pip install transformers

!pip install transformers gradio

import gradio as gr
from transformers import pipeline

generator = pipeline('text-generation', model='gpt2')

def generate_text(prompt):
    try:
        result = generator(prompt, max_length=150, num_return_sequences=1)
        return result[0]['generated_text']
    except Exception as e:
        return str(e)

def ui_function(prompt):
    return generate_text(prompt)

# Custom CSS styling
custom_css = """
    .gradio-container {
        background-color: #E6E6FA;  /* Lilac color */
    }
    .gradio-button {
        background-color: #8A2BE2;  /* Violet color */
        color: white;
    }
    .gradio-button:hover {
        background-color: #7A1FA1;  /* Darker violet on hover */
    }
"""

interface = gr.Interface(
    fn=ui_function,
    inputs=gr.Textbox(lines=2, placeholder="Enter your prompt here..."),
    outputs="text",
    title="Generative Text Model",
    description="Enter a prompt to generate human-like text.",
    examples=[
        ["Explain the impact of artificial intelligence on healthcare."],
        ["Write a paragraph about the benefits of learning a new language."]
    ],
    css=custom_css  # Apply the custom CSS for styling
)

interface.launch()



!pip install transformers
!pip install transformers gradio

import gradio as gr
from transformers import pipeline

generator = pipeline('text-generation', model='gpt2')

def generate_text(prompt):
    try:
        result = generator(prompt, max_length=150, num_return_sequences=1)
        return result[0]['generated_text']
    except Exception as e:
        return str(e)

def ui_function(prompt):
    return generate_text(prompt)

# Custom CSS styling
custom_css = """
    .gradio-container {
        background-color: #E6E6FA;  /* Lilac color */
    }
    .gradio-button {
        background-color: #8A2BE2;  /* Violet color */
        color: white;
    }
    .gradio-button:hover {
        background-color: #7A1FA1;  /* Darker violet on hover */
    }
"""

interface = gr.Interface(
    fn=ui_function,
    inputs=gr.Textbox(lines=2, placeholder="Enter your prompt here..."),
    outputs="text",
    title="Generative Text Model",
    description="Enter a prompt to generate human-like text.",
    examples=[
        ["Explain the impact of artificial intelligence on healthcare."],
        ["Write a paragraph about the benefits of learning a new language."]
    ],
    css=custom_css  # Apply the custom CSS for styling
)

interface.launch()

!pip install transformers
!pip install transformers gradio

import gradio as gr
from transformers import pipeline

generator = pipeline('text-generation', model='gpt2')

def generate_text(prompt):
    try:
        result = generator(prompt, max_length=150, num_return_sequences=1)
        return result[0]['generated_text']
    except Exception as e:
        return str(e)

def ui_function(prompt):
    return generate_text(prompt)

# Custom CSS styling
custom_css = """
    .gradio-container {
        background-color: #E6E6FA;  /* Lilac color */
    }
    .gradio-button {
        background-color: #8A2BE2;  /* Violet color */
        color: white;
    }
    .gradio-button:hover {
        background-color: #7A1FA1;  /* Darker violet on hover */
    }
"""

interface = gr.Interface(
    fn=ui_function,
    inputs=gr.Textbox(lines=2, placeholder="Enter your prompt here..."),
    outputs="text",
    title="Generative Text Model",
    description="Enter a prompt to generate human-like text.",
    examples=[
        ["Explain the impact of artificial intelligence on healthcare."],
        ["Write a paragraph about the benefits of learning a new language."]
    ],
    css=custom_css  # Apply the custom CSS for styling
)

interface.launch()